--- ZawartoÅ›Ä‡ pliku: src/stores/aiStore.js ---
import { defineStore } from 'pinia';
import axios from 'axios';
import { analyzeIntent } from '@/components/modulesAI/IntentAnalyzer';
import { getModelCapabilities, recommendModel } from '@/components/modulesAI/ModelAnalyzer';
import { tokenize } from '@/utils/tokenizer';
import { analyzeComplexity } from '@/utils/complexityAnalysis';

export const useAIStore = defineStore('ai', {
  state: () => ({
    conversations: [],
    currentConversation: null,
    availableModels: ['gpt-3.5-turbo', 'gpt-4', 'gpt-4-32k', 'chatgpt-4o-latest', 'gpt-4o-mini'],
    selectedModel: 'gpt-3.5-turbo',
    apiKey: null,
    isProcessing: false,
    error: null,
  }),

  getters: {
    getCurrentConversation: (state) => state.currentConversation,
    getConversationById: (state) => (id) => state.conversations.find(conv => conv.id === id),
    getModelCapabilities: (state) => getModelCapabilities(state.selectedModel),
  },

  actions: {
    async initializeConversation(topic) {
      const newConversation = {
        id: Date.now().toString(),
        topic,
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      this.conversations.push(newConversation);
      this.currentConversation = newConversation;
    },

    async sendMessage(message) {
      if (!this.currentConversation) {
        throw new Error('No active conversation');
      }

      this.isProcessing = true;
      this.error = null;

      try {
        const tokens = tokenize(message);
        const intent = analyzeIntent(message);
        const complexity = analyzeComplexity(message);

        const recommendedModel = recommendModel(intent, complexity, tokens.length);
        if (recommendedModel !== this.selectedModel) {
          console.warn(`Recommended model (${recommendedModel}) differs from selected model (${this.selectedModel})`);
        }

        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: this.selectedModel,
          messages: [
            ...this.currentConversation.messages.map(m => ({role: m.role, content: m.content})),
            {role: 'user', content: message}
          ],
        }, {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          }
        });

        const aiMessage = response.data.choices[0].message.content;

        this.currentConversation.messages.push(
          { role: 'user', content: message, timestamp: new Date() },
          { role: 'assistant', content: aiMessage, timestamp: new Date() }
        );
        this.currentConversation.updatedAt = new Date();

        return aiMessage;
      } catch (error) {
        this.error = error.message;
        throw error;
      } finally {
        this.isProcessing = false;
      }
    },

    setApiKey(key) {
      this.apiKey = key;
    },

    selectModel(model) {
      if (this.availableModels.includes(model)) {
        this.selectedModel = model;
      } else {
        throw new Error('Invalid model selected');
      }
    },

    async generateInsight(data, type) {
      // Implement custom insight generation logic here
      const insight = await this.sendMessage(`Generate an insight about the following ${type} data: ${JSON.stringify(data)}`);
      return insight;
    },

    exportConversation(id) {
      const conversation = this.getConversationById(id);
      if (!conversation) {
        throw new Error('Conversation not found');
      }
      return JSON.stringify(conversation, null, 2);
    },

    importConversation(conversationData) {
      const parsedData = JSON.parse(conversationData);
      if (!parsedData.id || !parsedData.topic || !Array.isArray(parsedData.messages)) {
        throw new Error('Invalid conversation data format');
      }
      this.conversations.push(parsedData);
    },

    deleteConversation(id) {
      const index = this.conversations.findIndex(conv => conv.id === id);
      if (index !== -1) {
        this.conversations.splice(index, 1);
        if (this.currentConversation && this.currentConversation.id === id) {
          this.currentConversation = null;
        }
      }
    },

    async analyzeConversationTrends() {
      // Implement conversation analysis logic here
      // This could include sentiment analysis, topic modeling, etc.
      // For now, we'll just return a placeholder
      return {
        totalConversations: this.conversations.length,
        averageMessagesPerConversation: this.conversations.reduce((acc, conv) => acc + conv.messages.length, 0) / this.conversations.length,
        mostCommonTopics: ['placeholder topic 1', 'placeholder topic 2'],
      };
    },
  },
});

--- ZawartoÅ›Ä‡ pliku: src/stores/modelStore.js ---
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import axios from 'axios';

export const useModelStore = defineStore('model', () => {
  const models = ref([]);
  const selectedModelId = ref(null);
  const loading = ref(false);
  const error = ref(null);
  const lastFetch = ref(null);

  const API_URL = 'https://api.example.com/ai-models'; // ZastÄ…p prawdziwym URL API
  const CACHE_TIME = 5 * 60 * 1000; // 5 minut

  const sortedModels = computed(() => {
    return [...models.value].sort((a, b) => b.maxTokens - a.maxTokens);
  });

  const selectedModel = computed(() => {
    return models.value.find(model => model.id === selectedModelId.value);
  });

  const getModelById = computed(() => {
    return (id) => models.value.find(model => model.id === id);
  });

  async function fetchModels(force = false) {
    if (!force && lastFetch.value && Date.now() - lastFetch.value < CACHE_TIME) {
      console.log('Using cached model data');
      return;
    }

    loading.value = true;
    error.value = null;

    try {
      const response = await axios.get(API_URL);
      models.value = response.data.map(model => ({
        ...model,
        color: model.color || getRandomColor(),
        icon: model.icon || 'ðŸ¤–'
      }));
      lastFetch.value = Date.now();
    } catch (e) {
      console.error('Error fetching models:', e);
      error.value = 'Failed to fetch models. Please try again later.';
    } finally {
      loading.value = false;
    }
  }

  function setSelectedModel(modelId) {
    const model = getModelById.value(modelId);
    if (model) {
      selectedModelId.value = modelId;
    } else {
      console.warn(`Model with id ${modelId} not found`);
    }
  }

  function addModel(model) {
    if (!models.value.some(m => m.id === model.id)) {
      models.value.push({
        ...model,
        color: model.color || getRandomColor(),
        icon: model.icon || 'ðŸ¤–'
      });
    }
  }

  function updateModel(updatedModel) {
    const index = models.value.findIndex(model => model.id === updatedModel.id);
    if (index !== -1) {
      models.value[index] = { ...models.value[index], ...updatedModel };
    }
  }

  function removeModel(modelId) {
    const index = models.value.findIndex(model => model.id === modelId);
    if (index !== -1) {
      models.value.splice(index, 1);
      if (selectedModelId.value === modelId) {
        selectedModelId.value = models.value[0]?.id || null;
      }
    }
  }

  function getRandomColor() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16);
  }

  return {
    models,
    sortedModels,
    selectedModel,
    selectedModelId,
    loading,
    error,
    getModelById,
    fetchModels,
    setSelectedModel,
    addModel,
    updateModel,
    removeModel
  };
});

--- ZawartoÅ›Ä‡ pliku: src/stores/textToSpeechStore.js ---
import { defineStore } from 'pinia';
import axios from 'axios';

const TTS_API_URL = 'https://texttospeech.googleapis.com/v1/text:synthesize';
const API_KEY = process.env.VUE_APP_GOOGLE_TTS_API_KEY;

export const useTextToSpeechStore = defineStore('textToSpeech', {
  state: () => ({
    voices: [],
    currentVoice: null,
    audioCache: new Map(),
    isLoading: false,
    error: null,
    playbackRate: 1,
    pitch: 1,
    volume: 1,
  }),

  getters: {
    availableLanguages: (state) => {
      return [...new Set(state.voices.map(voice => voice.languageCodes[0]))];
    },
    getVoicesByLanguage: (state) => (languageCode) => {
      return state.voices.filter(voice => voice.languageCodes.includes(languageCode));
    },
  },

  actions: {
    async loadVoices() {
      this.isLoading = true;
      this.error = null;
      try {
        const response = await axios.get(`${TTS_API_URL}/voices`, {
          params: { key: API_KEY }
        });
        this.voices = response.data.voices;
        if (this.voices.length > 0 && !this.currentVoice) {
          this.currentVoice = this.voices[0];
        }
      } catch (error) {
        console.error('Error loading voices:', error);
        this.error = 'Failed to load voices';
      } finally {
        this.isLoading = false;
      }
    },

    async synthesizeSpeech(text) {
      this.isLoading = true;
      this.error = null;
      try {
        const cacheKey = `${text}_${this.currentVoice.name}_${this.playbackRate}_${this.pitch}`;
        if (this.audioCache.has(cacheKey)) {
          return this.audioCache.get(cacheKey);
        }

        const response = await axios.post(TTS_API_URL, {
          input: { text },
          voice: {
            languageCode: this.currentVoice.languageCodes[0],
            name: this.currentVoice.name,
          },
          audioConfig: {
            audioEncoding: 'MP3',
            speakingRate: this.playbackRate,
            pitch: this.pitch,
          },
        }, {
          params: { key: API_KEY }
        });

        const audioContent = response.data.audioContent;
        const audioBlob = this.base64ToBlob(audioContent, 'audio/mp3');
        const audioUrl = URL.createObjectURL(audioBlob);

        this.audioCache.set(cacheKey, audioUrl);
        return audioUrl;
      } catch (error) {
        console.error('Speech synthesis error:', error);
        this.error = 'Failed to synthesize speech';
        throw error;
      } finally {
        this.isLoading = false;
      }
    },

    async speak(text) {
      try {
        const audioUrl = await this.synthesizeSpeech(text);
        const audio = new Audio(audioUrl);
        audio.playbackRate = this.playbackRate;
        audio.volume = this.volume;
        await audio.play();
      } catch (error) {
        console.error('Error playing audio:', error);
        this.error = 'Failed to play audio';
      }
    },

    setVoice(voiceName) {
      const voice = this.voices.find(v => v.name === voiceName);
      if (voice) {
        this.currentVoice = voice;
      } else {
        console.error('Voice not found:', voiceName);
      }
    },

    setPlaybackRate(rate) {
      this.playbackRate = Math.max(0.25, Math.min(4, rate));
    },

    setPitch(pitch) {
      this.pitch = Math.max(-20, Math.min(20, pitch));
    },

    setVolume(volume) {
      this.volume = Math.max(0, Math.min(1, volume));
    },

    clearCache() {
      this.audioCache.forEach(url => URL.revokeObjectURL(url));
      this.audioCache.clear();
    },

    base64ToBlob(base64, mimeType) {
      const byteCharacters = atob(base64);
      const byteArrays = [];

      for (let offset = 0; offset < byteCharacters.length; offset += 512) {
        const slice = byteCharacters.slice(offset, offset + 512);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }

      return new Blob(byteArrays, { type: mimeType });
    },

    async convertTextToSSML(text) {
      // This is a simple example. You might want to implement more sophisticated SSML conversion.
      return `<speak>${text}</speak>`;
    },

    async analyzeAudioCharacteristics(audioUrl) {
      // This would typically be done on the server side with audio processing libraries
      // For this example, we'll return mock data
      return {
        duration: 10.5, // seconds
        averageAmplitude: 0.7,
        peakAmplitude: 0.9,
        frequencySpectrum: [
          { frequency: 100, amplitude: 0.5 },
          { frequency: 1000, amplitude: 0.8 },
          { frequency: 10000, amplitude: 0.2 },
        ],
      };
    },
  },
});

--- ZawartoÅ›Ä‡ pliku: src/stores/threadStore.js ---
import { defineStore } from 'pinia';
import { v4 as uuidv4 } from 'uuid';
import { useAIStore } from './aiStore';

export const useThreadStore = defineStore('thread', {
  state: () => ({
    threads: [],
    currentThreadId: null,
  }),

  getters: {
    currentThread: (state) => state.threads.find(thread => thread.id === state.currentThreadId),
    getThreadById: (state) => (id) => state.threads.find(thread => thread.id === id),
    sortedThreads: (state) => [...state.threads].sort((a, b) => b.updatedAt - a.updatedAt),
  },

  actions: {
    async createThread(name) {
      const newThread = {
        id: uuidv4(),
        name,
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date(),
        metadata: {
          totalTokens: 0,
          sentiment: 'neutral',
          topics: [],
        },
      };
      this.threads.push(newThread);
      this.currentThreadId = newThread.id;
      return newThread;
    },

    async deleteThread(id) {
      const index = this.threads.findIndex(thread => thread.id === id);
      if (index !== -1) {
        this.threads.splice(index, 1);
        if (this.currentThreadId === id) {
          this.currentThreadId = this.threads.length > 0 ? this.threads[0].id : null;
        }
      }
    },

    async renameThread(id, newName) {
      const thread = this.getThreadById(id);
      if (thread) {
        thread.name = newName;
        thread.updatedAt = new Date();
      }
    },

    setCurrentThread(id) {
      if (this.getThreadById(id)) {
        this.currentThreadId = id;
      }
    },

    async addMessageToThread(threadId, role, content) {
      const thread = this.getThreadById(threadId);
      if (thread) {
        const aiStore = useAIStore();
        const newMessage = {
          id: uuidv4(),
          role,
          content,
          timestamp: new Date(),
        };
        thread.messages.push(newMessage);
        thread.updatedAt = new Date();

        // Update metadata
        thread.metadata.totalTokens += aiStore.estimateTokenCount(content);
        thread.metadata.sentiment = await aiStore.analyzeSentiment(content);
        thread.metadata.topics = await aiStore.extractTopics(thread.messages.map(m => m.content).join(' '));

        return newMessage;
      }
    },

    async generateThreadSummary(threadId) {
      const thread = this.getThreadById(threadId);
      if (thread) {
        const aiStore = useAIStore();
        const summary = await aiStore.generateSummary(thread.messages.map(m => m.content).join('\n'));
        return summary;
      }
    },

    async analyzeThreadInsights(threadId) {
      const thread = this.getThreadById(threadId);
      if (thread) {
        const aiStore = useAIStore();
        const insights = await aiStore.analyzeConversation(thread.messages);
        return insights;
      }
    },

    exportThread(id) {
      const thread = this.getThreadById(id);
      if (thread) {
        return JSON.stringify(thread, null, 2);
      }
    },

    importThread(threadData) {
      const parsedData = JSON.parse(threadData);
      if (!parsedData.id || !parsedData.name || !Array.isArray(parsedData.messages)) {
        throw new Error('Invalid thread data format');
      }
      this.threads.push(parsedData);
    },

    async mergeThreads(threadIds) {
      if (threadIds.length < 2) {
        throw new Error('At least two threads are required for merging');
      }

      const threadsToMerge = threadIds.map(id => this.getThreadById(id)).filter(Boolean);
      if (threadsToMerge.length !== threadIds.length) {
        throw new Error('One or more thread IDs are invalid');
      }

      const newThread = await this.createThread(`Merged Thread ${new Date().toISOString()}`);
      const allMessages = threadsToMerge.flatMap(thread => thread.messages)
        .sort((a, b) => a.timestamp - b.timestamp);

      for (const message of allMessages) {
        await this.addMessageToThread(newThread.id, message.role, message.content);
      }

      // Delete original threads
      for (const threadId of threadIds) {
        await this.deleteThread(threadId);
      }

      return newThread;
    },
  },
});

--- ZawartoÅ›Ä‡ pliku: src/stores/translationStore.js ---
import { defineStore } from 'pinia';
import axios from 'axios';
import { detectLanguage } from '@/utils/languageDetection';

const TRANSLATION_API_URL = 'https://translation.googleapis.com/language/translate/v2';
const API_KEY = process.env.VUE_APP_GOOGLE_TRANSLATE_API_KEY;

export const useTranslationStore = defineStore('translation', {
  state: () => ({
    history: [],
    supportedLanguages: [],
    isLoading: false,
    error: null,
  }),

  getters: {
    getHistoryByLanguagePair: (state) => (from, to) => {
      return state.history.filter(entry => entry.from === from && entry.to === to);
    },
    getMostUsedLanguages: (state) => {
      const languageCounts = state.history.reduce((acc, entry) => {
        acc[entry.from] = (acc[entry.from] || 0) + 1;
        acc[entry.to] = (acc[entry.to] || 0) + 1;
        return acc;
      }, {});
      return Object.entries(languageCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([lang]) => lang);
    },
  },

  actions: {
    async fetchSupportedLanguages() {
      try {
        const response = await axios.get(`${TRANSLATION_API_URL}/languages`, {
          params: { key: API_KEY }
        });
        this.supportedLanguages = response.data.data.languages;
      } catch (error) {
        console.error('Error fetching supported languages:', error);
        this.error = 'Failed to fetch supported languages';
      }
    },

    async translateText({ text, from, to }) {
      this.isLoading = true;
      this.error = null;
      try {
        if (!from) {
          const detectedLanguage = await detectLanguage(text);
          from = detectedLanguage.languageCode;
        }

        const response = await axios.post(`${TRANSLATION_API_URL}`, null, {
          params: {
            key: API_KEY,
            q: text,
            source: from,
            target: to,
            format: 'text'
          }
        });

        const translatedText = response.data.data.translations[0].translatedText;
        const newEntry = { original: text, translated: translatedText, from, to, timestamp: new Date() };
        this.history.unshift(newEntry);

        return { translatedText, detectedSourceLanguage: from, confidence: 1 }; // Google Translate doesn't provide confidence scores
      } catch (error) {
        console.error('Translation error:', error);
        this.error = 'Failed to translate text';
        throw error;
      } finally {
        this.isLoading = false;
      }
    },

    clearHistory() {
      this.history = [];
    },

    removeHistoryEntry(index) {
      this.history.splice(index, 1);
    },

    async batchTranslate(texts, from, to) {
      this.isLoading = true;
      this.error = null;
      try {
        const translations = await Promise.all(
          texts.map(text => this.translateText({ text, from, to }))
        );
        return translations.map(t => t.translatedText);
      } catch (error) {
        console.error('Batch translation error:', error);
        this.error = 'Failed to perform batch translation';
        throw error;
      } finally {
        this.isLoading = false;
      }
    },

    async detectLanguage(text) {
      try {
        const response = await axios.post(`${TRANSLATION_API_URL}/detect`, null, {
          params: {
            key: API_KEY,
            q: text
          }
        });
        return response.data.data.detections[0][0];
      } catch (error) {
        console.error('Language detection error:', error);
        this.error = 'Failed to detect language';
        throw error;
      }
    },

    getTranslationStatistics() {
      const totalTranslations = this.history.length;
      const languagePairs = {};
      const characterCounts = {
        original: 0,
        translated: 0,
      };

      this.history.forEach(entry => {
        const pair = `${entry.from}-${entry.to}`;
        languagePairs[pair] = (languagePairs[pair] || 0) + 1;
        characterCounts.original += entry.original.length;
        characterCounts.translated += entry.translated.length;
      });

      const mostUsedPair = Object.entries(languagePairs)
        .sort((a, b) => b[1] - a[1])[0];

      return {
        totalTranslations,
        mostUsedLanguagePair: mostUsedPair ? mostUsedPair[0] : null,
        averageOriginalLength: totalTranslations ? characterCounts.original / totalTranslations : 0,
        averageTranslatedLength: totalTranslations ? characterCounts.translated / totalTranslations : 0,
        expansionRatio: characterCounts.original ? characterCounts.translated / characterCounts.original : 1,
      };
    },
  },
});
