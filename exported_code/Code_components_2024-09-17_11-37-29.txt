--- Zawartość pliku: src/components/AdminDashboard.vue ---
<template>
  <div class="admin-dashboard">
    <h1>Panel Administratora</h1>
    <table>
      <thead>
        <tr>
          <th>Imię</th>
          <th>Nazwisko</th>
          <th>Email</th>
          <th>Numer Telefonu</th>
          <th>Rola</th>
          <th>Akcje</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="user in users" :key="user.id">
          <td>{{ user.firstName }}</td>
          <td>{{ user.lastName }}</td>
          <td>{{ user.email }}</td>
          <td>{{ user.phoneNumber }}</td>
          <td>
            <select v-model="user.permissions" @change="updateUserRole(user)">
              <option value="Pracownik">Pracownik</option>
              <option value="Manager">Manager</option>
              <option value="Administrator">Administrator</option>
            </select>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import { collection, doc, onSnapshot, updateDoc } from 'firebase/firestore';
import { db } from '@/main';
import { getFunctions, httpsCallable } from "firebase/functions";
import { getAuth } from 'firebase/auth';

export default {
  name: 'AdminDashboard',
  data() {
    return {
      users: []
    };
  },
  methods: {
    // Aktualizacja roli użytkownika
    async updateUserRole(user) {
      console.log("[INFO] Rozpoczynam aktualizację roli użytkownika...", user);

      try {
        const auth = getAuth();
        console.log("[INFO] Bieżący użytkownik:", auth.currentUser);

        await auth.currentUser.reload();  // Upewnij się, że token użytkownika jest aktualny
        const idToken = await auth.currentUser.getIdToken(true);

        console.log("[INFO] Aktualny token użytkownika:", idToken);

        const functions = getFunctions();
        const setRole = httpsCallable(functions, 'setUserRole');

        console.log("[INFO] Wywoływanie funkcji setUserRole z:", { uid: user.id, role: user.permissions });
        const result = await setRole({ uid: user.id, role: user.permissions });

        console.log("[SUCCESS] Wynik aktualizacji roli:", result.data);

        // Aktualizacja dokumentu użytkownika w Firestore
        const userDoc = doc(db, 'users', user.id);
        await updateDoc(userDoc, { permissions: user.permissions });

        console.log("[SUCCESS] Rola użytkownika została zaktualizowana w Firestore:", user);

        this.$toast.add({ severity: 'success', summary: 'Sukces', detail: 'Rola użytkownika została zaktualizowana.', life: 3000 });
      } catch (error) {
        console.error("[ERROR] Błąd przy aktualizacji roli użytkownika:", error);

        if (error.code === 'functions/internal') {
          this.$toast.add({ severity: 'error', summary: 'Błąd', detail: 'Wewnętrzny błąd serwera.', life: 3000 });
        } else {
          this.$toast.add({ severity: 'error', summary: 'Błąd', detail: 'Wystąpił błąd podczas przypisywania roli.', life: 3000 });
        }
      }
    },

    // Nasłuch zmian w kolekcji users
    async listenForUserChanges() {
      console.log("[INFO] Rozpoczynam nasłuch zmian w kolekcji users...");

      const usersRef = collection(db, 'users');
      onSnapshot(usersRef, (snapshot) => {
        const users = [];
        snapshot.forEach((doc) => {
          users.push({ id: doc.id, ...doc.data() });
        });

        this.users = users;
        console.log("[INFO] Users updated in real-time:", this.users);
      });
    }
  },
  async mounted() {
    console.log("[INFO] Komponent AdminDashboard zamontowany. Rozpoczynam nasłuch zmian w czasie rzeczywistym...");
    
    await this.listenForUserChanges();
  }
};
</script>

<style scoped>
.admin-dashboard {
  max-width: 800px;
  margin: 0 auto;
  padding: 2em;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
}

th {
  background-color: #4CAF50;
  color: white;
}

td select {
  padding: 5px;
}
</style>


--- Zawartość pliku: src/components/Dashboard.vue ---
<template>
  <div class="dashboard">
    <h1>Panel</h1>
    <p v-if="userData">Witaj, {{ userData.email }}</p>
  </div>
</template>

<script>
import { getAuth } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/main';
import { mapState } from 'vuex';

export default {
  name: 'Dashboard',
  computed: {
    ...mapState(['user']),
    userData() {
      return this.user || {};
    }
  },
  methods: {
    logout() {
      const auth = getAuth();
      auth.signOut().then(() => {
        this.$router.push('/login');
      }).catch((error) => {
        console.error('Błąd podczas wylogowywania:', error);
      });
    }
  },
  async mounted() {
    const user = getAuth().currentUser;
    if (user) {
      const userDoc = doc(db, 'users', user.uid);
      const userSnapshot = await getDoc(userDoc);
      if (userSnapshot.exists()) {
        this.$store.commit('setUser', userSnapshot.data());
      } else {
        console.log('No such document!');
      }
    }
  }
};
</script>

<style scoped>
.dashboard {
  max-width: 800px;
  margin: 0 auto;
  padding: 2em;
  text-align: center;
}
h1 {
  color: #42b983;
}
button {
  padding: 0.5em 1em;
  color: white;
  background-color: #42b983;
  border: none;
  cursor: pointer;
  margin-top: 1em;
}
button:hover {
  background-color: #36966c;
}
</style>


--- Zawartość pliku: src/components/DashboardAi.vue ---
<template>
  <div class="dashboard-ai">
    <h1>{{ $t('aiDashboard.title') }}</h1>
    <p>{{ $t('aiDashboard.description') }}</p>

    <div class="dashboard-content">
      <div class="main-panel">
        <ModelSelector v-model="selectedModel" @update:model-value="handleModelChange" />

        <CommandInput
          v-model="command"
          :maxTokens="maxTokens"
          :temperature="temperature"
          @update:max-tokens="maxTokens = $event"
          @update:temperature="temperature = $event"
          @submit="sendCommand"
        />

        <Button
          :label="isProcessing ? $t('aiDashboard.processing') : $t('aiDashboard.generateResponse')"
          @click="sendCommand"
          :disabled="!command || isProcessing"
          :loading="isProcessing"
          class="send-button p-button-primary"
        />

        <ResponseViewer
          v-if="response"
          :response="response"
          :model="selectedModel"
          @copy="copyToClipboard"
        />

        <ResponseEvaluator
          v-if="response"
          :response="response"
          :originalQuery="command"
          @evaluation-complete="handleResponseEvaluation"
        />

        <ResponseFormatter
          v-if="response"
          :response="response"
          @format-changed="handleFormatChange"
        />

        <SemanticAnalyzer
          v-if="response"
          :text="response"
          @analysis-complete="handleSemanticAnalysis"
        />
      </div>

      <div class="side-panel">
        <ResponseTimeline :responseEvents="responseEvents" />

        <InteractiveExamples
          :initialExamples="interactiveExamples"
          @example-run="handleExampleRun"
        />

        <ResponseComparator
          v-if="previousResponse"
          :responseA="previousResponse"
          :responseB="response"
        />

        <CommandHistory
          :history="history"
          @clear-history="clearCommandHistory"
          @select-command="selectHistoricalCommand"
        />

        <HistoryAnalysis :analysisData="historyAnalysis" />

        <ExportManager
          :data="exportData"
          @export-complete="handleExportComplete"
        />
      </div>
    </div>

    <LanguageTranslator
      v-if="response"
      :text="response"
      @translation-complete="handleTranslation"
    />

    <TextToSpeech
      v-if="response"
      :text="response"
      @speech-complete="handleSpeechSynthesis"
    />

    <AIDebugger :debugInfo="debugInfo" />

    <Toast />
  </div>
</template>

<script>
import { ref, computed, onMounted, watch } from 'vue';
import { useI18n } from 'vue-i18n';
import { useAIStore } from '@/stores/aiStore';
import { useThreadStore } from '@/stores/threadStore';
import { useTranslationStore } from '@/stores/translationStore';
import { useTextToSpeechStore } from '@/stores/textToSpeechStore';
import { useNotificationStore } from '@/stores/notificationStore';
import ModelSelector from '@/components/modulesAI/ModelSelector.vue';
import CommandInput from '@/components/modulesAI/CommandInput.vue';
import { evaluateCommand } from '@/components/modulesAI/CommandEvaluator.js';
import ResponseViewer from '@/components/modulesAI/ResponseViewer.vue';
import { evaluateResponse } from '@/components/modulesAI/ResponseEvaluator.js';
import { formatResponse } from '@/components/modulesAI/ResponseFormatter.js';
import { analyzeText } from '@/components/modulesAI/SemanticAnalyzer.js';
import ResponseTimeline from '@/components/modulesAI/ResponseTimeline.vue';
import InteractiveExamples from '@/components/modulesAI/InteractiveExamples.vue';
import ResponseComparator from '@/components/modulesAI/ResponseComparator.vue';
import { getCommandHistory } from '@/components/modulesAI/CommandHistory.js';
import HistoryAnalysis from '@/components/modulesAI/HistoryAnalysis.vue';
import { exportData } from '@/components/modulesAI/ExportManager.js';
import LanguageTranslator from '@/components/modulesAI/LanguageTranslator.vue';
import TextToSpeech from '@/components/modulesAI/TextToSpeech.vue';
import AIDebugger from '@/components/modulesAI/AIDebugger.vue';
import Button from 'primevue/button';
import Toast from 'primevue/toast';
import { useToast } from 'primevue/usetoast';

export default {
  name: 'DashboardAi',
  components: {
    ModelSelector,
    CommandInput,
    ResponseViewer,
    ResponseEvaluator,
    ResponseFormatter,
    SemanticAnalyzer,
    ResponseTimeline,
    InteractiveExamples,
    ResponseComparator,
    CommandHistory,
    HistoryAnalysis,
    ExportManager,
    LanguageTranslator,
    TextToSpeech,
    AIDebugger,
    Button,
    Toast,
  },
  setup() {
    const { t } = useI18n(); // i18n for translations
    const toast = useToast(); // Toast for notifications
    const aiStore = useAIStore(); // AI store for managing commands and responses
    const threadStore = useThreadStore(); // Thread store for managing command history
    const translationStore = useTranslationStore(); // Translation store for managing text translations
    const ttsStore = useTextToSpeechStore(); // Text-to-speech store
    const notificationStore = useNotificationStore(); // Notification store for managing app-wide notifications

    // State variables
    const command = ref('');
    const response = ref('');
    const previousResponse = ref('');
    const maxTokens = ref(1000);
    const temperature = ref(0.7);
    const responseEvents = ref([]);
    const interactiveExamples = ref([]);
    const debugInfo = ref({});
    const isProcessing = ref(false);

    // Computed properties
    const selectedModel = computed(() => aiStore.selectedModel);
    const history = computed(() => threadStore.currentThread?.messages || []);
    const historyAnalysis = computed(() => aiStore.analyzeConversationTrends());
    const exportData = computed(() => ({
      command: command.value,
      response: response.value,
      model: selectedModel.value,
      timestamp: new Date().toISOString(),
    }));

    onMounted(async () => {
      try {
        await aiStore.initializeConversation('New Conversation');
        await ttsStore.loadVoices();
        loadInteractiveExamples();
      } catch (error) {
        console.error('Initialization error:', error);
        notificationStore.showNotification({
          type: 'error',
          message: t('notifications.initializationError'),
        });
      }
    });

    const sendCommand = async () => {
      if (!command.value || isProcessing.value) return;

      isProcessing.value = true;
      responseEvents.value.push({
        title: t('aiDashboard.commandSent'),
        description: t('aiDashboard.commandSentDescription'),
        timestamp: new Date(),
      });

      try {
        previousResponse.value = response.value;
        response.value = await aiStore.sendMessage(command.value);

        responseEvents.value.push({
          title: t('aiDashboard.responseReceived'),
          description: t('aiDashboard.responseReceivedDescription'),
          timestamp: new Date(),
        });

        notificationStore.showNotification({
          type: 'success',
          message: t('notifications.responseGenerated'),
        });
      } catch (error) {
        console.error('Error sending command:', error);
        debugInfo.value = { ...debugInfo.value, error: error.message };
        notificationStore.showNotification({
          type: 'error',
          message: t('notifications.commandError'),
        });
      } finally {
        isProcessing.value = false;
      }
    };

    const clearCommandHistory = () => {
      threadStore.clearHistory();
      notificationStore.showNotification({
        type: 'info',
        message: t('notifications.historyCleared'),
      });
    };

    const selectHistoricalCommand = (historicalCommand) => {
      command.value = historicalCommand;
    };

    const handleModelChange = (newModel) => {
      aiStore.setSelectedModel(newModel);
      notificationStore.showNotification({
        type: 'info',
        message: t('notifications.modelChanged', { model: newModel }),
      });
    };

    const handleEvaluation = (evaluation) => {
      debugInfo.value = { ...debugInfo.value, commandEvaluation: evaluation };
    };

    const handleResponseEvaluation = (evaluation) => {
      debugInfo.value = { ...debugInfo.value, responseEvaluation: evaluation };
    };

    const handleFormatChange = (formattedResponse) => {
      response.value = formattedResponse;
    };

    const handleSemanticAnalysis = (analysis) => {
      debugInfo.value = { ...debugInfo.value, semanticAnalysis: analysis };
    };

    const handleExportComplete = (exportedData) => {
      console.log('Export completed:', exportedData);
      notificationStore.showNotification({
        type: 'success',
        message: t('notifications.exportComplete'),
      });
    };

    const handleTranslation = (translation) => {
      debugInfo.value = { ...debugInfo.value, translation };
    };

    const handleSpeechSynthesis = (speechInfo) => {
      debugInfo.value = { ...debugInfo.value, speechSynthesis: speechInfo };
    };

    const handleExampleRun = async (example) => {
      command.value = example.command;
      await sendCommand();
    };

    const loadInteractiveExamples = () => {
      interactiveExamples.value = [
        { id: 1, command: t('aiDashboard.exampleCommand1'), description: t('aiDashboard.exampleDescription1') },
        { id: 2, command: t('aiDashboard.exampleCommand2'), description: t('aiDashboard.exampleDescription2') },
      ];
    };

    const copyToClipboard = (text) => {
      navigator.clipboard.writeText(text)
        .then(() => {
          notificationStore.showNotification({
            type: 'success',
            message: t('notifications.textCopied'),
          });
        })
        .catch((err) => {
          console.error('Failed to copy text: ', err);
          notificationStore.showNotification({
            type: 'error',
            message: t('notifications.copyFailed'),
          });
        });
    };

    watch(selectedModel, (newModel, oldModel) => {
      if (newModel !== oldModel) {
        notificationStore.showNotification({
          type: 'info',
          message: t('notifications.modelChanged', { model: newModel }),
        });
      }
    });

    return {
      command,
      response,
      previousResponse,
      maxTokens,
      temperature,
      responseEvents,
      interactiveExamples,
      debugInfo,
      isProcessing,
      selectedModel,
      history,
      historyAnalysis,
      exportData,
      sendCommand,
      clearCommandHistory,
      selectHistoricalCommand,
      handleModelChange,
      handleEvaluation,
      handleResponseEvaluation,
      handleFormatChange,
      handleSemanticAnalysis,
      handleExportComplete,
      handleTranslation,
      handleSpeechSynthesis,
      handleExampleRun,
      copyToClipboard,
    };
  },
};
</script>

<style scoped>
.dashboard-ai {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: var(--font-family);
}

h1 {
  color: var(--text-color);
  text-align: center;
  margin-bottom: 1rem;
}

p {
  text-align: center;
  color: var(--text-color-secondary);
  margin-bottom: 2rem;
}

.dashboard-content {
  display: flex;
  gap: 2rem;
}

.main-panel {
  flex: 2;
}

.side-panel {
  flex: 1;
}

.send-button {
  width: 100%;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

@media (max-width: 1024px) {
  .dashboard-content {
    flex-direction: column;
  }

  .main-panel,
  .side-panel {
    width: 100%;
  }
}

:deep(.p-card) {
  margin-bottom: 1rem;
  background-color: var(--surface-a);
  border: 1px solid var(--surface-d);
}

:deep(.p-card .p-card-title) {
  color: var(--text-color);
  font-size: 1.2rem;
}

:deep(.p-card .p-card-content) {
  padding: 1rem;
}

:deep(.p-inputtext) {
  width: 100%;
}

:deep(.p-dropdown) {
  width: 100%;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.3s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateY(20px);
  opacity: 0;
}

:deep([data-theme="dark"]) .dashboard-ai {
  background-color: var(--surface-a);
}

:deep([data-theme="dark"]) .p-card {
  background-color: var(--surface-b);
}

:deep([data-theme="dark"]) .p-inputtext,
:deep([data-theme="dark"]) .p-dropdown {
  background-color: var(--surface-c);
  color: var(--text-color);
}

:deep(.p-button) {
  font-weight: bold;
}

:deep(.p-inputtext:focus),
:deep(.p-dropdown:focus) {
  box-shadow: 0 0 0 2px var(--primary-color);
}

::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--surface-b);
}

::-webkit-scrollbar-thumb {
  background-color: var(--primary-color);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: var(--primary-color-text);
}
</style>


--- Zawartość pliku: src/components/Home.vue ---
<template>
  <div class="home">
    <h1>Strona Główna</h1>
    <p>Witamy na stronie głównej naszej aplikacji do zarządzania zleceniami. Znajdziesz tu najnowsze informacje i aktualizacje dotyczące naszych usług.</p>
    
    <div class="features">
      <h2>Główne Funkcje</h2>
      <ul>
        <li>Rejestracja i uwierzytelnianie użytkowników</li>
        <li>Bezpieczne logowanie z wykorzystaniem ReCaptcha</li>
        <li>Zarządzanie profilem użytkownika</li>
        <li>Integracja z bazą danych w czasie rzeczywistym</li>
        <li>Dodawanie i zarządzanie zleceniami</li>
      </ul>
    </div>

    <div class="user-guide">
      <h2>Jak Zacząć</h2>
      <p>Aby rozpocząć korzystanie z aplikacji, wykonaj następujące kroki:</p>
      <ol>
        <li>Zarejestruj się, tworząc nowe konto użytkownika.</li>
        <li>Zaloguj się, używając swojego adresu e-mail i hasła.</li>
        <li>Przeczytać i Zaakceptować regulamin</li>
        <li>Uzupełnij swój profil, dodając niezbędne informacje.</li>
        <li>Rozpocznij dodawanie zleceń i zarządzanie nimi poprzez panel użytkownika.</li>
      </ol>
    </div>

    
  </div>
</template>
<script>
export default {
  name: 'Home',
};
</script>
<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&family=Roboto:wght@400;700&display=swap');

.home {
  text-align: center;
  padding: 2em;
  font-family: 'Roboto', sans-serif;
  background-color: #f5f5f5;
  color: #333;
}

h1 {
  color: #42b983;
  font-family: 'Montserrat', sans-serif;
  font-size: 2.5em;
  margin-bottom: 0.5em;
}

p {
  color: #666;
  font-size: 1.2em;
  margin-bottom: 2em;
}

.features, .user-guide, .contact {
  margin-top: 2em;
  background: white;
  padding: 1.5em;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

h2 {
  color: #333;
  font-family: 'Montserrat', sans-serif;
  font-size: 2em;
  margin-bottom: 1em;
}

.features ul, .contact ul {
  list-style-type: none;
  padding: 0;
  font-size: 1.2em;
}

.features li, .contact li {
  background: #e9e9e9;
  margin: 0.5em 0;
  padding: 0.5em;
  border-radius: 5px;
}

.user-guide ol {
  padding-left: 20px;
  text-align: left;
}

.user-guide li {
  background: #e9e9e9;
  margin: 0.5em 0;
  padding: 0.5em;
  border-radius: 5px;
  font-size: 1.2em;
}

@media (max-width: 768px) {
  .home {
    padding: 1em;
  }

  h1 {
    font-size: 2em;
  }

  h2 {
    font-size: 1.5em;
  }

  p, .features ul, .contact ul, .user-guide li {
    font-size: 1em;
  }
}
</style>


--- Zawartość pliku: src/components/Login.vue ---
<template>
  <div class="login-container">
    <div class="login-card">
      <h2 class="title">Zaloguj się</h2>
      <form @submit.prevent="loginWithEmail" class="login-form">
        <input type="email" v-model="email" placeholder="Email" class="input-field" required />
        <input type="password" v-model="password" placeholder="Hasło" class="input-field" required />
        <div class="g-recaptcha" :data-sitekey="recaptchaSiteKey"></div>
        <button type="submit" class="login-btn" :disabled="loading">
          <img src="@/components/login-icon.svg" alt="Login" class="btn-icon" />
          <span v-if="loading" class="spinner"></span>Zaloguj się
        </button>
      </form>
      <div class="login-options">
        <button @click="signInWithGoogle" class="google-login-btn">
          <img src="@/components/google-icon.svg" alt="Google" class="btn-icon" />
          Zaloguj się przez Google
        </button>
      </div>
      <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
    </div>
  </div>
</template>

<script>
import { getAuth, signInWithEmailAndPassword, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { db } from '@/firebase';
import { mapActions } from 'vuex';
import axios from 'axios';

export default {
  name: 'Login',
  data() {
    return {
      email: '',
      password: '',
      errorMessage: '',
      loading: false,
      recaptchaSiteKey: import.meta.env.VITE_RECAPTCHA_SITE_KEY,
    };
  },
  methods: {
    ...mapActions(['setUser']),

    // Logowanie przez Google
    async signInWithGoogle() {
      this.loading = true;
      const auth = getAuth();
      const provider = new GoogleAuthProvider();

      try {
        const result = await signInWithPopup(auth, provider);
        const user = result.user;

        const userRef = doc(db, 'users', user.uid);
        const userDoc = await getDoc(userRef);

        if (!userDoc.exists()) {
          const userData = {
            id: user.uid,
            firstName: user.displayName ? user.displayName.split(' ')[0] : '',
            lastName: user.displayName ? user.displayName.split(' ')[1] : '',
            email: user.email,
            phoneNumber: user.phoneNumber || '',
            permissions: 'user',
            created_at: new Date(),
            updated_at: new Date(),
            is_active: true,
            profile_picture_url: user.photoURL || '',
            last_login: new Date(),
          };
          await setDoc(userRef, userData);
          this.setUser(userData);
        } else {
          const userData = userDoc.data();
          this.setUser(userData);
        }

        this.$router.push('/dashboard').then(() => {
          this.$router.go(0);
        });
      } catch (error) {
        console.error('Błąd podczas logowania przez Google:', error);
        this.errorMessage = `Błąd logowania: ${error.message}`;
      } finally {
        this.loading = false;
      }
    },

    // Logowanie przez Email
    async loginWithEmail() {
      this.loading = true;

      try {
        const token = await grecaptcha.execute(this.recaptchaSiteKey, { action: 'login' });
        const response = await axios.post('/verify-recaptcha', { token });

        if (!response.data.success) {
          this.errorMessage = 'Weryfikacja reCAPTCHA nie powiodła się.';
          this.loading = false;
          return;
        }

        const auth = getAuth();
        const userCredential = await signInWithEmailAndPassword(auth, this.email, this.password);
        const user = userCredential.user;

        const userRef = doc(db, 'users', user.uid);
        const userDoc = await getDoc(userRef);
        if (userDoc.exists()) {
          const userData = userDoc.data();
          this.setUser(userData);
          this.$router.push('/dashboard').then(() => {
            this.$router.go(0);
          });
        } else {
          console.error('Nie znaleziono dokumentu użytkownika!');
          this.errorMessage = 'Nie znaleziono danych użytkownika.';
        }
      } catch (error) {
        console.error('Błąd podczas logowania:', error);
        this.errorMessage = `Błąd podczas logowania: ${error.message}`;
      } finally {
        this.loading = false;
      }
    },
  },
};
</script>

<style scoped>
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f0f4f8;
  padding: 2rem;
}

.login-card {
  background-color: #ffffff;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  text-align: center;
  max-width: 400px;
  width: 100%;
  transition: all 0.3s ease-in-out;
}

.title {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #333;
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.input-field {
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.input-field:focus {
  border-color: #42b983;
  outline: none;
}

.login-btn {
  background-color: #42b983;
  color: white;
  padding: 0.75rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  display: flex;
  justify-content: center;
  align-items: center;
}

.login-btn .btn-icon {
  margin-right: 0.5rem;
  width: 20px;
  height: 20px;
}

.login-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.google-login-btn {
  background-color: #db4437;
  color: white;
  padding: 0.75rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1rem;
  transition: background-color 0.3s ease;
}

.google-login-btn .btn-icon {
  width: 20px;
  height: 20px;
}

.google-login-btn:hover {
  background-color: #c53727;
}

.error-message {
  color: red;
  margin-top: 1rem;
}

.spinner {
  border: 2px solid #f3f3f3;
  border-top: 2px solid #42b983;
  border-radius: 50%;
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@media (max-width: 768px) {
  .login-card {
    padding: 1.5rem;
  }
}
</style>



--- Zawartość pliku: src/components/Modal.vue ---
<template>
    <Teleport to="body">
      <Transition name="modal-fade">
        <div v-if="modelValue" class="modal-overlay" @click="closeOnOverlayClick && close()">
          <div
            ref="overlay"
            class="modal-container"
            :class="sizeClass"
            @click.stop
          >
            <div class="modal-header">
              <h3 :id="titleId">{{ title }}</h3>
              <button
                v-if="showCloseButton"
                class="modal-close"
                aria-label="Close"
                @click="close"
              >
                <span class="sr-only">{{ t('close') }}</span>
                <i class="pi pi-times" aria-hidden="true"></i>
              </button>
            </div>
            <div class="modal-body">
              <slot></slot>
            </div>
            <div v-if="$slots.footer" class="modal-footer">
              <slot name="footer"></slot>
            </div>
          </div>
        </div>
      </Transition>
    </Teleport>
  </template>
  
  <script>
  import { ref, computed, watch, onMounted, onBeforeUnmount, nextTick } from 'vue';
  import { useI18n } from 'vue-i18n';
  
  export default {
    name: 'Modal',
    props: {
      modelValue: {
        type: Boolean,
        required: true
      },
      title: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'medium',
        validator: (value) => ['small', 'medium', 'large', 'full'].includes(value)
      },
      closeOnOverlayClick: {
        type: Boolean,
        default: true
      },
      closeOnEsc: {
        type: Boolean,
        default: true
      },
      showCloseButton: {
        type: Boolean,
        default: true
      }
    },
    emits: ['update:modelValue', 'close'],
    setup(props, { emit }) {
      const { t } = useI18n();
      const overlay = ref(null);
      const titleId = ref(`modal-title-${Math.random().toString(36).substr(2, 9)}`);
      const previousActiveElement = ref(null);
  
      const sizeClass = computed(() => `modal-${props.size}`);
  
      const close = () => {
        emit('update:modelValue', false);
        emit('close');
      };
  
      const handleTabbing = (e) => {
        const focusableElements = overlay.value.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
  
        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement.focus();
            e.preventDefault();
          }
        } else {
          if (document.activeElement === lastElement) {
            firstElement.focus();
            e.preventDefault();
          }
        }
      };
  
      watch(() => props.modelValue, (newValue) => {
        if (newValue) {
          previousActiveElement.value = document.activeElement;
          nextTick(() => {
            const firstFocusableElement = overlay.value.querySelector(
              'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            );
            firstFocusableElement?.focus();
          });
        } else {
          previousActiveElement.value?.focus();
        }
      });
  
      onMounted(() => {
        document.addEventListener('keydown', handleTabbing);
      });
  
      onBeforeUnmount(() => {
        document.removeEventListener('keydown', handleTabbing);
      });
  
      return {
        overlay,
        titleId,
        sizeClass,
        close,
        t
      };
    }
  };
  </script>
  
  <style scoped>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal-container {
    background-color: var(--surface-a);
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);
    display: flex;
    flex-direction: column;
    max-height: 90vh;
    width: 90%;
    max-width: 600px;
  }
  
  .modal-small {
    max-width: 400px;
  }
  
  .modal-large {
    max-width: 800px;
  }
  
  .modal-full {
    width: 100%;
    height: 100%;
    max-width: none;
    max-height: none;
    border-radius: 0;
  }
  
  .modal-header {
    padding: 1rem;
    border-bottom: 1px solid var(--surface-d);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .modal-body {
    padding: 1rem;
    overflow-y: auto;
  }
  
  .modal-footer {
    padding: 1rem;
    border-top: 1px solid var(--surface-d);
  }
  
  .modal-close {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.5rem;
    color: var(--text-color-secondary);
  }
  
  .modal-fade-enter-active,
  .modal-fade-leave-active {
    transition: opacity 0.3s ease;
  }
  
  .modal-fade-enter-from,
  .modal-fade-leave-to {
    opacity: 0;
  }
  
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
  
  @media (max-width: 600px) {
    .modal-container {
      width: 100%;
      height: 100%;
      max-width: none;
      max-height: none;
      border-radius: 0;
    }
  }
  </style>
  

--- Zawartość pliku: src/components/NavigationBar.vue ---
<template>
  <nav class="navbar" :class="{ 'navbar-mobile': isMobile }">
    <div class="navbar-brand">
      <router-link to="/" class="navbar-logo">
        <span class="app-name">{{ $t('appName') }}</span>
      </router-link>
      <button @click="toggleMobileMenu" class="navbar-toggle" aria-label="Toggle navigation menu">
        <i class="pi" :class="isMobileMenuOpen ? 'pi-times' : 'pi-bars'"></i>
      </button>
    </div>
    <ul class="nav-list" :class="{ 'nav-list-mobile': isMobile, 'nav-list-open': isMobileMenuOpen }">
      <li class="nav-item">
        <router-link to="/" exact-active-class="active">{{ $t('navigation.home') }}</router-link>
      </li>
      <template v-if="!user">
        <li class="nav-item">
          <router-link to="/login" exact-active-class="active">{{ $t('navigation.login') }}</router-link>
        </li>
        <li class="nav-item">
          <router-link to="/register" exact-active-class="active">{{ $t('navigation.register') }}</router-link>
        </li>
      </template>
      <template v-else>
        <li class="nav-item">
          <router-link to="/dashboard" exact-active-class="active">{{ $t('navigation.dashboard') }}</router-link>
        </li>
        <li v-if="isManagerOrAdmin" class="nav-item">
          <router-link to="/order-dashboard" exact-active-class="active">{{ $t('navigation.orderDashboard') }}</router-link>
        </li>
        <li v-if="isAdmin" class="nav-item">
          <router-link to="/admin-dashboard" exact-active-class="active">{{ $t('navigation.adminDashboard') }}</router-link>
        </li>
        <li class="nav-item">
          <router-link to="/ai-dashboard" exact-active-class="active">{{ $t('navigation.aiDashboard') }}</router-link>
        </li>
        <li class="nav-item">
          <router-link to="/work-hours" exact-active-class="active">{{ $t('navigation.workHours') }}</router-link>
        </li>
        <li class="nav-item">
          <router-link to="/update-profile" exact-active-class="active">{{ $t('navigation.updateProfile') }}</router-link>
        </li>
        <li class="nav-item profile-section">
          <div class="user-profile" @click="toggleProfileMenu" ref="profileMenuTrigger">
            <img v-if="user.profile_picture_url" :src="user.profile_picture_url" :alt="user.displayName" class="nav-profile-picture" />
            <span v-else class="nav-profile-initials">{{ userInitials }}</span>
            <span class="user-name">{{ user.displayName }}</span>
          </div>
          <Transition name="fade">
            <ul v-if="isProfileMenuOpen" class="profile-menu" ref="profileMenu">
              <li @click="navigateTo('/update-profile')">{{ $t('navigation.profile') }}</li>
              <li @click="navigateTo('/settings')">{{ $t('navigation.settings') }}</li>
              <li @click="logout">{{ $t('navigation.logout') }}</li>
            </ul>
          </Transition>
        </li>
      </template>
    </ul>
    <div class="navbar-actions">
      <LanguageSelector />
      <button @click="toggleTheme" class="theme-toggle-btn" :aria-label="isDarkMode ? $t('navigation.lightMode') : $t('navigation.darkMode')">
        <i :class="isDarkMode ? 'pi pi-sun' : 'pi pi-moon'"></i>
      </button>
    </div>
  </nav>
</template>
<script>
import { ref, computed, onMounted, onUnmounted, watch } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRouter } from 'vue-router';
import { useStore } from 'vuex';
import LanguageSelector from '@/components/modulesAI/LanguageSelector.vue';

export default {
  name: 'NavigationBar',
  components: {
    LanguageSelector
  },
  setup() {
    const { t } = useI18n();
    const router = useRouter();
    const store = useStore();

    const isMobile = ref(window.innerWidth < 768);
    const isMobileMenuOpen = ref(false);
    const isProfileMenuOpen = ref(false);
    const profileMenuTrigger = ref(null);
    const profileMenu = ref(null);

    const user = computed(() => store.getters.getUser);
    const isDarkMode = computed(() => store.state.isDarkMode);
    const isAdmin = computed(() => user.value?.permissions === 'Administrator');
    const isManagerOrAdmin = computed(() => ['Manager', 'Administrator'].includes(user.value?.permissions));
    const userInitials = computed(() => {
      if (user.value?.displayName) {
        return user.value.displayName.split(' ').map(n => n[0]).join('').toUpperCase();
      }
      return '';
    });

    const toggleMobileMenu = () => {
      isMobileMenuOpen.value = !isMobileMenuOpen.value;
    };

    const toggleProfileMenu = (event) => {
      event.stopPropagation();
      isProfileMenuOpen.value = !isProfileMenuOpen.value;
    };

    const toggleTheme = () => {
      store.commit('toggleTheme');
    };

    const navigateTo = (path) => {
      router.push(path);
      isProfileMenuOpen.value = false;
      if (isMobile.value) {
        isMobileMenuOpen.value = false;
      }
    };

    const logout = async () => {
      try {
        await store.dispatch('logout');
        store.commit('showNotification', {
          type: 'success',
          message: t('notifications.logoutSuccess')
        });
        router.push('/login');
      } catch (error) {
        console.error('Logout error:', error);
        store.commit('showNotification', {
          type: 'error',
          message: t('notifications.logoutError')
        });
      }
    };

    const handleResize = () => {
      isMobile.value = window.innerWidth < 768;
      if (!isMobile.value) {
        isMobileMenuOpen.value = false;
      }
    };

    const handleClickOutside = (event) => {
      if (isProfileMenuOpen.value && !profileMenuTrigger.value.contains(event.target) && !profileMenu.value.contains(event.target)) {
        isProfileMenuOpen.value = false;
      }
    };

    onMounted(() => {
      window.addEventListener('resize', handleResize);
      document.addEventListener('click', handleClickOutside);
    });

    onUnmounted(() => {
      window.removeEventListener('resize', handleResize);
      document.removeEventListener('click', handleClickOutside);
    });

    watch(isMobileMenuOpen, (isOpen) => {
      if (isOpen) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = '';
      }
    });

    return {
      user,
      isDarkMode,
      isAdmin,
      isManagerOrAdmin,
      userInitials,
      isMobile,
      isMobileMenuOpen,
      isProfileMenuOpen,
      profileMenuTrigger,
      profileMenu,
      toggleMobileMenu,
      toggleProfileMenu,
      toggleTheme,
      navigateTo,
      logout
    };
  }
};
</script>
<style scoped>
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 1rem;
  background-color: var(--surface-a);
  box-shadow: var(--shadow-2);
  position: sticky;
  top: 0;
  z-index: 1000;
  transition: all 0.3s ease;
}

.navbar-brand {
  display: flex;
  align-items: center;
}

.navbar-logo img {
  height: 2rem;
}

.navbar-toggle {
  display: none;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: var(--text-color);
  cursor: pointer;
}

.nav-list {
  display: flex;
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.nav-item {
  margin: 0 0.5rem;
}

.nav-item a {
  color: var(--text-color);
  text-decoration: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.nav-item a:hover,
.nav-item a.active {
  background-color: var(--surface-b);
  color: var(--primary-color);
}

.profile-section {
  position: relative;
}

.user-profile {
  display: flex;
  align-items: center;
  cursor: pointer;
}
.nav-profile-picture,
.nav-profile-initials {
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  margin-right: 0.5rem;
  object-fit: cover;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--primary-color);
  color: var(--primary-color-text);
  font-weight: bold;
}

.user-name {
  font-weight: 500;
}

.profile-menu {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: var(--surface-a);
  border: 1px solid var(--surface-d);
  border-radius: 4px;
  box-shadow: var(--shadow-2);
  padding: 0.5rem 0;
  min-width: 150px;
  z-index: 1000;
}

.profile-menu li {
  padding: 0.5rem 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.profile-menu li:hover {
  background-color: var(--surface-b);
}

.navbar-actions {
  display: flex;
  align-items: center;
}

.theme-toggle-btn {
  background: none;
  border: none;
  font-size: 1.2rem;
  color: var(--text-color);
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 50%;
  transition: background-color 0.3s ease;
}

.theme-toggle-btn:hover {
  background-color: var(--surface-b);
}

@media (max-width: 768px) {
  .navbar-mobile {
    flex-wrap: wrap;
  }

  .navbar-toggle {
    display: block;
  }

  .nav-list-mobile {
    display: none;
    width: 100%;
    flex-direction: column;
    padding: 1rem 0;
  }

  .nav-list-open {
    display: flex;
  }

  .nav-item {
    margin: 0.5rem 0;
  }

  .profile-section {
    order: -1;
    width: 100%;
    margin-bottom: 1rem;
  }

  .user-profile {
    justify-content: center;
  }

  .profile-menu {
    position: static;
    width: 100%;
    box-shadow: none;
    border: none;
    background-color: var(--surface-b);
  }
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
</style>

--- Zawartość pliku: src/components/Register.vue ---
<template>
  <div class="register-container">
    <div class="register-card">
      <h2>Rejestracja</h2>

      <!-- Formularz rejestracji -->
      <form @submit.prevent="registerWithEmail" class="register-form">
        <div class="p-field">
          <label for="firstName">Imię</label>
          <input type="text" v-model="firstName" placeholder="Wprowadź imię" class="input-field" required />
        </div>

        <div class="p-field">
          <label for="lastName">Nazwisko</label>
          <input type="text" v-model="lastName" placeholder="Wprowadź nazwisko" class="input-field" required />
        </div>

        <div class="p-field">
          <label for="email">Email</label>
          <input type="email" v-model="email" placeholder="Wprowadź email" class="input-field" required />
        </div>

        <div class="p-field">
          <label for="password">Hasło</label>
          <input type="password" v-model="password" placeholder="Wprowadź hasło" class="input-field" required />
        </div>

        <div class="p-field">
          <label for="confirmPassword">Potwierdź hasło</label>
          <input type="password" v-model="confirmPassword" placeholder="Potwierdź hasło" class="input-field" required />
        </div>

        <!-- reCAPTCHA -->
        <div class="g-recaptcha" :data-sitekey="recaptchaSiteKey"></div>

        <button type="submit" class="register-btn" :disabled="loading">
          <span v-if="loading" class="spinner"></span> Zarejestruj się
        </button>
      </form>

      <!-- Opcje logowania -->
      <div class="register-options">
        <button @click="registerWithGoogle" class="google-register-btn">
          <img src="@/components/google-icon.svg" alt="Google" class="btn-icon" /> Zarejestruj się przez Google
        </button>
      </div>

      <!-- Obsługa błędów -->
      <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
    </div>
  </div>
</template>

<script>
import {
  getAuth,
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithPopup,
  updateProfile,
} from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { db } from '@/firebase';
import axios from 'axios';

export default {
  name: 'Register',
  data() {
    return {
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
      errorMessage: '',
      loading: false,
      recaptchaSiteKey: import.meta.env.VITE_RECAPTCHA_SITE_KEY,
    };
  },
  methods: {
    async registerWithEmail() {
      this.loading = true;

      try {
        if (this.password !== this.confirmPassword) {
          this.errorMessage = 'Hasła się nie zgadzają';
          this.loading = false;
          return;
        }

        // Weryfikacja reCAPTCHA
        const token = grecaptcha.getResponse();
        if (!token) {
          this.errorMessage = 'Proszę wypełnić reCAPTCHA.';
          this.loading = false;
          return;
        }

        const response = await axios.post('/verify-recaptcha', { token });
        if (!response.data.success) {
          this.errorMessage = 'Weryfikacja reCAPTCHA nie powiodła się.';
          this.loading = false;
          return;
        }

        const auth = getAuth();
        const userCredential = await createUserWithEmailAndPassword(auth, this.email, this.password);
        const user = userCredential.user;

        await updateProfile(user, { displayName: `${this.firstName} ${this.lastName}` });

        // Zapis użytkownika w Firestore
        const userRef = doc(db, 'users', user.uid);
        const userData = {
          id: user.uid,
          firstName: this.firstName,
          lastName: this.lastName,
          email: this.email,
          permissions: 'user',
          created_at: new Date(),
          updated_at: new Date(),
          is_active: true,
          profile_picture_url: user.photoURL || '',
          last_login: new Date(),
        };
        await setDoc(userRef, userData);

        this.$router.push('/dashboard');
      } catch (error) {
        console.error('Błąd podczas rejestracji:', error);
        this.errorMessage = `Błąd rejestracji: ${error.message}`;
      } finally {
        this.loading = false;
      }
    },

    async registerWithGoogle() {
      this.loading = true;

      try {
        const auth = getAuth();
        const provider = new GoogleAuthProvider();
        const result = await signInWithPopup(auth, provider);
        const user = result.user;

        // Sprawdzenie, czy użytkownik istnieje w Firestore
        const userRef = doc(db, 'users', user.uid);
        const userData = {
          id: user.uid,
          firstName: user.displayName ? user.displayName.split(' ')[0] : '',
          lastName: user.displayName ? user.displayName.split(' ')[1] : '',
          email: user.email,
          phoneNumber: user.phoneNumber || '',
          permissions: 'user',
          created_at: new Date(),
          updated_at: new Date(),
          is_active: true,
          profile_picture_url: user.photoURL || '',
          last_login: new Date(),
        };

        await setDoc(userRef, userData);
        this.$router.push('/dashboard');
      } catch (error) {
        console.error('Błąd podczas rejestracji przez Google:', error);
        this.errorMessage = `Błąd rejestracji: ${error.message}`;
      } finally {
        this.loading = false;
      }
    },
  },
};
</script>

<style scoped>
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f0f4f8;
  padding: 2rem;
}

.register-card {
  background-color: #ffffff;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  max-width: 400px;
  width: 100%;
}

.register-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.input-field {
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.register-btn {
  background-color: #42b983;
  color: white;
  padding: 0.75rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
}

.register-btn:disabled {
  background-color: #ccc;
}

.google-register-btn {
  background-color: #db4437;
  color: white;
  padding: 0.75rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1rem;
}

.error-message {
  color: red;
  margin-top: 1rem;
}
</style>


--- Zawartość pliku: src/components/UpdateProfile.vue ---
<template>
    <div class="update-profile">
      <h1>Aktualizacja Profilu</h1>
      
      <!-- Sekcja: Aktualne dane -->
      <div class="current-data-section" v-if="userData">
        <h2>Aktualne dane</h2>
        <p><strong>Imię:</strong> {{ userData.firstName }}</p>
        <p><strong>Nazwisko:</strong> {{ userData.lastName }}</p>
        <p><strong>Numer Telefonu:</strong> {{ userData.phoneNumber }}</p>
        <div v-if="userData.profilePictureUrl">
          <p><strong>Zdjęcie profilowe:</strong></p>
          <img :src="userData.profilePictureUrl" alt="Profile Picture" class="profile-picture"/>
        </div>
      </div>
      
      <!-- Sekcja: Aktualizacja danych -->
      <form @submit.prevent="updateProfile" class="update-profile-form">
        <h2>Aktualizacja danych</h2>
        <div v-if="userData">
          <div class="p-field">
            <label for="firstName">Imię</label>
            <InputText id="firstName" v-model="userData.firstName" placeholder="Wprowadź imię" required />
          </div>
          <div class="p-field">
            <label for="lastName">Nazwisko</label>
            <InputText id="lastName" v-model="userData.lastName" placeholder="Wprowadź nazwisko" required />
          </div>
          <div class="p-field">
            <label for="phoneNumber">Numer Telefonu</label>
            <InputText id="phoneNumber" v-model="userData.phoneNumber" placeholder="Wprowadź numer telefonu" required />
          </div>
          <div class="p-field">
            <label for="profilePicture">Zdjęcie profilowe</label>
            <input type="file" id="profilePicture" @change="onFileChange" />
          </div>
          <Button label="Zaktualizuj" :disabled="isSubmitting" @click="updateProfile"></Button>
        </div>
        <div v-else>
          <p>Ładowanie danych użytkownika...</p>
        </div>
      </form>
      
      <!-- Sekcja: Zmiana hasła -->
      <form @submit.prevent="changePassword" class="change-password-form">
        <h2>Zmiana hasła</h2>
        <div class="p-field">
          <label for="currentPassword">Obecne hasło</label>
          <InputText id="currentPassword" v-model="passwordData.currentPassword" placeholder="Wprowadź obecne hasło" type="password" required />
        </div>
        <div class="p-field">
          <label for="newPassword">Nowe hasło</label>
          <InputText id="newPassword" v-model="passwordData.newPassword" placeholder="Wprowadź nowe hasło" type="password" required />
        </div>
        <div class="p-field">
          <label for="confirmNewPassword">Potwierdź nowe hasło</label>
          <InputText id="confirmNewPassword" v-model="passwordData.confirmNewPassword" placeholder="Potwierdź nowe hasło" type="password" required />
        </div>
        <Button label="Zmień hasło" :disabled="isSubmitting" @click="changePassword"></Button>
      </form>
    </div>
  </template>
  
  <script>
  import { getAuth, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from 'firebase/auth';
  import { doc, getDoc, updateDoc } from 'firebase/firestore';
  import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
  import { auth, db, storage } from '@/main';
  import { reactive, ref as vueRef, onMounted } from 'vue';
  import InputText from 'primevue/inputtext';
  import Button from 'primevue/button';
  
  export default {
    name: 'UpdateProfile',
    components: {
      InputText,
      Button
    },
    setup() {
      const userData = reactive({});
      const passwordData = reactive({
        currentPassword: '',
        newPassword: '',
        confirmNewPassword: ''
      });
      const isSubmitting = vueRef(false);
      const selectedFile = vueRef(null);
  
      const fetchUserData = async () => {
        try {
          const user = getAuth().currentUser;
          if (user) {
            const userDoc = doc(db, 'users', user.uid);
            const userSnapshot = await getDoc(userDoc);
            if (userSnapshot.exists()) {
              console.log('User data fetched:', userSnapshot.data());
              Object.assign(userData, userSnapshot.data());
            } else {
              console.log('No such document!');
            }
          }
        } catch (error) {
          console.error('Error fetching user data:', error);
        }
      };
  
      const updateProfile = async () => {
        isSubmitting.value = true;
        try {
          const user = getAuth().currentUser;
          if (user) {
            let profilePictureUrl = userData.profilePictureUrl;
            if (selectedFile.value) {
              const storageRef = ref(storage, `profilePictures/${user.uid}`);
              await uploadBytes(storageRef, selectedFile.value);
              profilePictureUrl = await getDownloadURL(storageRef);
            }
  
            const userDoc = doc(db, 'users', user.uid);
            const updatedData = {
              firstName: userData.firstName,
              lastName: userData.lastName,
              phoneNumber: userData.phoneNumber,
            };
  
            if (profilePictureUrl) {
              updatedData.profilePictureUrl = profilePictureUrl;
            }
  
            console.log('Updating user data:', updatedData);
            await updateDoc(userDoc, updatedData);
            console.log('Profile updated successfully');
            await fetchUserData();
            window.location.reload(); // Dodanie odświeżenia strony
          }
        } catch (error) {
          console.error('Error updating profile:', error);
        } finally {
          isSubmitting.value = false;
        }
      };
  
      const changePassword = async () => {
        isSubmitting.value = true;
        try {
          const user = getAuth().currentUser;
          const credential = EmailAuthProvider.credential(user.email, passwordData.currentPassword);
          await reauthenticateWithCredential(user, credential);
  
          if (passwordData.newPassword === passwordData.confirmNewPassword) {
            await updatePassword(user, passwordData.newPassword);
            console.log('Password changed successfully');
          } else {
            console.error('Passwords do not match');
          }
        } catch (error) {
          console.error('Error changing password:', error);
        } finally {
          isSubmitting.value = false;
        }
      };
  
      const onFileChange = (e) => {
        selectedFile.value = e.target.files[0];
      };
  
      onMounted(() => {
        fetchUserData();
      });
  
      return { userData, passwordData, isSubmitting, updateProfile, changePassword, onFileChange };
    }
  };
  </script>
  
  <style scoped>
  .update-profile {
    max-width: 400px;
    margin: 0 auto;
    text-align: center;
    padding: 2em;
  }
  .update-profile-form, .change-password-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  .p-field {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
  }
  .p-invalid {
    border: 1px solid red;
  }
  .p-error {
    color: red;
  }
  .profile-picture {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 50%;
  }
  </style>
  

--- Zawartość pliku: src/components/google-icon.svg ---
<?xml version="1.0" ?><svg id="Capa_1" style="enable-background:new 0 0 150 150;" version="1.1" viewBox="0 0 150 150" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><style type="text/css">
	.st0{fill:#1A73E8;}
	.st1{fill:#EA4335;}
	.st2{fill:#4285F4;}
	.st3{fill:#FBBC04;}
	.st4{fill:#34A853;}
	.st5{fill:#4CAF50;}
	.st6{fill:#1E88E5;}
	.st7{fill:#E53935;}
	.st8{fill:#C62828;}
	.st9{fill:#FBC02D;}
	.st10{fill:#1565C0;}
	.st11{fill:#2E7D32;}
	.st12{fill:#F6B704;}
	.st13{fill:#E54335;}
	.st14{fill:#4280EF;}
	.st15{fill:#34A353;}
	.st16{clip-path:url(#SVGID_2_);}
	.st17{fill:#188038;}
	.st18{opacity:0.2;fill:#FFFFFF;enable-background:new    ;}
	.st19{opacity:0.3;fill:#0D652D;enable-background:new    ;}
	.st20{clip-path:url(#SVGID_4_);}
	.st21{opacity:0.3;fill:url(#_45_shadow_1_);enable-background:new    ;}
	.st22{clip-path:url(#SVGID_6_);}
	.st23{fill:#FA7B17;}
	.st24{opacity:0.3;fill:#174EA6;enable-background:new    ;}
	.st25{opacity:0.3;fill:#A50E0E;enable-background:new    ;}
	.st26{opacity:0.3;fill:#E37400;enable-background:new    ;}
	.st27{fill:url(#Finish_mask_1_);}
	.st28{fill:#FFFFFF;}
	.st29{fill:#0C9D58;}
	.st30{opacity:0.2;fill:#004D40;enable-background:new    ;}
	.st31{opacity:0.2;fill:#3E2723;enable-background:new    ;}
	.st32{fill:#FFC107;}
	.st33{opacity:0.2;fill:#1A237E;enable-background:new    ;}
	.st34{opacity:0.2;}
	.st35{fill:#1A237E;}
	.st36{fill:url(#SVGID_7_);}
	.st37{fill:#FBBC05;}
	.st38{clip-path:url(#SVGID_9_);fill:#E53935;}
	.st39{clip-path:url(#SVGID_11_);fill:#FBC02D;}
	.st40{clip-path:url(#SVGID_13_);fill:#E53935;}
	.st41{clip-path:url(#SVGID_15_);fill:#FBC02D;}
</style><g><path class="st14" d="M120,76.1c0-3.1-0.3-6.3-0.8-9.3H75.9v17.7h24.8c-1,5.7-4.3,10.7-9.2,13.9l14.8,11.5   C115,101.8,120,90,120,76.1L120,76.1z"/><path class="st15" d="M75.9,120.9c12.4,0,22.8-4.1,30.4-11.1L91.5,98.4c-4.1,2.8-9.4,4.4-15.6,4.4c-12,0-22.1-8.1-25.8-18.9   L34.9,95.6C42.7,111.1,58.5,120.9,75.9,120.9z"/><path class="st12" d="M50.1,83.8c-1.9-5.7-1.9-11.9,0-17.6L34.9,54.4c-6.5,13-6.5,28.3,0,41.2L50.1,83.8z"/><path class="st13" d="M75.9,47.3c6.5-0.1,12.9,2.4,17.6,6.9L106.6,41C98.3,33.2,87.3,29,75.9,29.1c-17.4,0-33.2,9.8-41,25.3   l15.2,11.8C53.8,55.3,63.9,47.3,75.9,47.3z"/></g></svg>

--- Zawartość pliku: src/components/login-icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M480-120v-80h280v-560H480v-80h280q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H480Zm-80-160-55-58 102-102H120v-80h327L345-622l55-58 200 200-200 200Z"/></svg>
